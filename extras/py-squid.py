#!/usr/bin/env python3

import os
import logging
import subprocess
import time
import socket

class Squid:

    def __init__(self):

        self.squid_cache = 'squid -z'
        self.squid_run = 'squid -N'
        self.squid_stop = 'squid -k shutdown'
        self.clean_cache = 'rm -fr /var/cache/squid/*'
        self.squid_listen_port = os.getenv("SQUID_LISTEN_PORT", '3128')

        squid_type = os.environ.get("MODE", "AUTO")

        if squid_type.upper() == "CUSTOM":
            logger.info("Mode Custom")
            logger.info("Get Values")
            logger.info("Custom Config")
            cfg = self.get_values()
            logger.debug(f"Custom Config\n{cfg}")
            self.writing(cfg)

        elif squid_type.upper() == "AUTO":
            logger.info("Mode Auto")
            logger.info("Auto Config")
            cfg = self.cfg_default()
            logger.debug(f"Auto Config\n{cfg}")
            self.writing(cfg)

        else:
            logger.error(f"Mode '{squid_type.upper()}'not found")
            exit(1)

    def get_values(self):
        values = {}
        variables = os.environ
        for item in variables:
            if item.upper().find("SQUID_") == 0:
                values[item] = os.environ.get(item)
        cfg = ""
        cfg = ""
        for item in values:
            cfg = cfg + values[item] + "\n"
        cfg = self.cfg_basic(cfg)
        return cfg

    def cfg_default(self):
        value = """
# configuration file automatically generated by py-squid

pid_filename /var/cache/squid/squid.pid

acl SSL_ports port 443
acl Safe_ports port 80		# http
acl Safe_ports port 21		# ftp
acl Safe_ports port 443		# https
acl Safe_ports port 70		# gopher
acl Safe_ports port 210		# wais
acl Safe_ports port 1025-65535	# unregistered ports
acl Safe_ports port 280		# http-mgmt
acl Safe_ports port 488		# gss-http
acl Safe_ports port 591		# filemaker
acl Safe_ports port 777		# multiling http
acl CONNECT method CONNECT

# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

# Only allow cachemgr access from localhost
# http_access allow localhost manager
http_access deny manager

# Custom
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED
acl whitelist dstdomain .com .github.io
http_access allow whitelist # authenticated

# And finally deny all other access to this proxy
http_access deny all

# Squid normally listens to port 3128
http_port 3128

# Uncomment and adjust the following to add a disk cache directory.
# cache_dir ufs /var/cache/squid 100 16 256

# Leave coredumps in the first cache dir
coredump_dir /var/cache/squid

#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

######## Send Logs to stdout ########
logfile_rotate 0
cache_log stdio:/dev/stdout
access_log stdio:/dev/stdout
cache_store_log stdio:/dev/stdout
        """
        return value

    def cfg_basic(self, cfg):
        value = f"""
# configuration file automatically generated by py-squid

# pid
pid_filename /var/cache/squid/squid.pid

## auth
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED

## config custom
{cfg}
# And finally deny all other access to this proxy
http_access deny all

## default
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

# Leave coredumps in the first cache dir
coredump_dir /var/cache/squid

## send logs to stdout
logfile_rotate 0
cache_log stdio:/dev/stdout
access_log stdio:/dev/stdout
cache_store_log stdio:/dev/stdout
        """
        return value

    def writing(self, cfg):
        try:
            f = open("/etc/squid/squid.conf", "w")
            f.write(cfg)
            f.close()
        except Exception as e:
            logger.error(f"{e}")
            exit(1)

    def start(self):
        try:
            logger.info("Starting Squid Proxy")
            self.squid_cache_proc = subprocess.check_call(self.squid_cache, shell=True)
            time.sleep(2)
            self.squid_proc = subprocess.Popen(self.squid_run, shell=True)
            self.setup = True
        except Exception as e:
            logger.error(f"Starting Squid: FAIL {e}")
            self.setup = False
            self.unstart()
        return self

    def unstart(self):
        if self.setup:
            logger.info("Stopping Squid Proxy")
            subprocess.check_call(self.squid_stop, shell=True)
            time.sleep(2)

    def healthcheck(self, port_num):
        """ Detect if a port is open on localhost"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        return sock.connect_ex(('127.0.0.1', port_num)) == 0
    
def main():
    # Logging
    global logger
    logger = logging.getLogger('Squid')
    log_level = os.environ.get("LOG_LEVEL", "INFO").upper()
    if log_level == "INFO":
        logger.setLevel(logging.INFO)
    elif log_level == "DEBUG":
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.DEBUG)
        logger.debug(f"LOG_LEVEL {log_level} not found")
    ch = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s', "%Y-%m-%d %H:%M:%S")
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    logger.info("Init Functions")
    logger.info(f"Log Level {log_level}")
    # Init
    squid = Squid()
    squid.start()
    try:
        unhealthy = 0
        while True:
            if squid.healthcheck(int(squid.squid_listen_port)) is True:
                logger.debug("Healthy")
            else:
                logger.debug("UnHealthy")
                unhealthy = unhealthy + 1
                if unhealthy == 3:
                    squid.unstart()
                    break
            time.sleep(5) 
    except KeyboardInterrupt:
        squid.unstart()
        print("CTRL-C caught, shutting down.")
    except Exception as ex:
        squid.unstart()
        print(f"Caught exception, {ex}, shutting down")

if __name__ == '__main__':
    main()